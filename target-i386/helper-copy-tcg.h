#define _M_CC_OP    (1<<1)
#define _M_CC_SRC   (1<<2)
#define _M_CC_DST   (1<<3)
#define _M_CC_TMP   (1<<4)
#define _M_EAX      (1<<5)
#define _M_ECX      (1<<6)
#define _M_EDX      (1<<7)
#define _M_EBX      (1<<8)
#define _M_ESP      (1<<9)
#define _M_EBP      (1<<10)
#define _M_ESI      (1<<11)
#define _M_EDI      (1<<12)

#define _M_CC       (_M_CC_OP | _M_CC_SRC | _M_CC_DST)

#define _RM_EXCP    (_M_CC)
#define _WM_EXCP    (_M_CC)
#define _AM_EXCP    0

DEF_HELPER_FLAGS_4(cc_compute_all, TCG_CALL_NO_RWG_SE, tl, tl, tl, tl, int)
DEF_HELPER_FLAGS_4(cc_compute_c, TCG_CALL_NO_RWG_SE, tl, tl, tl, tl, int)
#ifdef CONFIG_DBAF
DEF_HELPER_2_M(dbaf_tcg_custom_instruction_handler, void, env, i64, 0, 0, 0)
DEF_HELPER_4_M(dbaf_tcg_execution_handler, void, env, ptr, tl, tl, 0, 0, 0)
#endif
DEF_HELPER_0(lock, void)
DEF_HELPER_0(unlock, void)
DEF_HELPER_3_M(write_eflags, void, env, tl, i32, 0, _M_CC_SRC, 0)
DEF_HELPER_1_M(read_eflags, tl, env, _M_CC, 0, 0)
DEF_HELPER_2_M(divb_AL, void, env, tl, _M_EAX | _RM_EXCP, _M_EAX | _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(idivb_AL, void, env, tl, _M_EAX | _RM_EXCP, _M_EAX | _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(divw_AX, void, env, tl, _M_EAX | _M_EDX | _RM_EXCP, _M_EAX | _M_EDX | _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(idivw_AX, void, env, tl, _M_EAX | _M_EDX | _RM_EXCP, _M_EAX | _M_EDX | _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(divl_EAX, void, env, tl, _M_EAX | _M_EDX | _RM_EXCP, _M_EAX | _M_EDX | _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(idivl_EAX, void, env, tl, _M_EAX | _M_EDX | _RM_EXCP, _M_EAX | _M_EDX | _WM_EXCP, _AM_EXCP)
#ifdef TARGET_X86_64
DEF_HELPER_2(divq_EAX, void, env, tl)
DEF_HELPER_2(idivq_EAX, void, env, tl)
#endif

DEF_HELPER_2_M(aam, void, env, int, _M_EAX, _M_EAX | _M_CC_DST, 0)
DEF_HELPER_2_M(aad, void, env, int, _M_EAX, _M_EAX | _M_CC_DST, 0)
DEF_HELPER_1_M(aaa, void, env, _M_EAX | _M_CC, _M_EAX | _M_CC_SRC, 0)
DEF_HELPER_1_M(aas, void, env, _M_EAX | _M_CC, _M_EAX | _M_CC_SRC, 0)
DEF_HELPER_1_M(daa, void, env, _M_EAX | _M_CC, _M_EAX | _M_CC_SRC, 0)
DEF_HELPER_1_M(das, void, env, _M_EAX | _M_CC, _M_EAX | _M_CC_SRC, 0)

DEF_HELPER_2_M(lsl, tl, env, tl, _M_CC, _M_CC_SRC, 0)
DEF_HELPER_2_M(lar, tl, env, tl, _M_CC, _M_CC_SRC, 0)
DEF_HELPER_2_M(verr, void, env, tl, _M_CC, _M_CC_SRC, 0)
DEF_HELPER_2_M(verw, void, env, tl, _M_CC, _M_CC_SRC, 0)
DEF_HELPER_2_M(lldt, void, env, int, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(ltr, void, env, int, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_3_M(load_seg, void, env, int, int, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_4_M(ljmp_protected, void, env, int, tl, int, (uint64_t)-1, (uint64_t)-1, _AM_EXCP)
DEF_HELPER_5_M(lcall_real, void, env, int, tl, int, int, _M_ESP, _M_ESP, 0)
DEF_HELPER_5_M(lcall_protected, void, env, int, tl, int, int, (uint64_t)-1, (uint64_t)-1, _AM_EXCP)
DEF_HELPER_2_M(iret_real, void, env, int, _M_ESP, _M_ESP | _M_CC_SRC, 1)
DEF_HELPER_3_M(iret_protected, void, env, int, int, (uint64_t)-1, (uint64_t)-1, 1)
DEF_HELPER_3_M(lret_protected, void, env, int, int, (uint64_t)-1, (uint64_t)-1, 1)
DEF_HELPER_2_M(read_crN, tl, env, int, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_3_M(write_crN, void, env, int, tl, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(lmsw, void, env, tl, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_1(clts, void, env)
DEF_HELPER_3_M(movl_drN_T0, void, env, int, tl, 0, 0, 0)
DEF_HELPER_2_M(invlpg, void, env, tl, _RM_EXCP, _WM_EXCP, _AM_EXCP)

DEF_HELPER_4_M(enter_level, void, env, int, int, tl, _M_EBP | _M_ESP, 0, 1)
#ifdef TARGET_X86_64
DEF_HELPER_4(enter64_level, void, env, int, int, tl)
#endif
DEF_HELPER_1_M(sysenter, void, env, _RM_EXCP, _M_ESP | _WM_EXCP, 0)
DEF_HELPER_2_M(sysexit, void, env, int, _M_ECX | _M_EDX | _RM_EXCP, _M_ESP | _WM_EXCP, 0)
#ifdef TARGET_X86_64
DEF_HELPER_2(syscall, void, env, int)
DEF_HELPER_2(sysret, void, env, int)
#endif
DEF_HELPER_2_M(hlt, void, env, int, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(monitor, void, env, tl, _M_ECX | _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(mwait, void, env, int, _M_ECX | _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2(pause, void, env, int)
DEF_HELPER_1(debug, void, env)
DEF_HELPER_1(reset_rf, void, env)
DEF_HELPER_3_M(raise_interrupt, void, env, int, int, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(raise_exception, void, env, int, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_1(cli, void, env)
DEF_HELPER_1(sti, void, env)
DEF_HELPER_1(clac, void, env)
DEF_HELPER_1(stac, void, env)
DEF_HELPER_1(set_inhibit_irq, void, env)
DEF_HELPER_1(reset_inhibit_irq, void, env)
DEF_HELPER_3_M(boundw, void, env, tl, int, _RM_EXCP, _WM_EXCP, 1)
DEF_HELPER_3_M(boundl, void, env, tl, int, _RM_EXCP, _WM_EXCP, 1)
DEF_HELPER_1_M(rsm, void, env, (uint64_t)-1, (uint64_t)-1, 1)
DEF_HELPER_2_M(into, void, env, int, _RM_EXCP | _M_CC, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(cmpxchg8b, void, env, tl,
        _M_CC | _M_EAX | _M_EBX | _M_ECX | _M_EDX, _M_EAX | _M_EDX | _M_CC_SRC, 1)
#ifdef TARGET_X86_64
DEF_HELPER_2(cmpxchg16b, void, env, tl)
#endif
DEF_HELPER_1_M(single_step, void, env, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_1_M(cpuid, void, env, _RM_EXCP | _M_EAX | _M_ECX, _WM_EXCP | _M_EAX | _M_ECX | _M_EBX | _M_EDX, _AM_EXCP)
DEF_HELPER_1_M(rdtsc, void, env, _RM_EXCP, _WM_EXCP | _M_EAX | _M_EDX, _AM_EXCP)
DEF_HELPER_1_M(rdtscp, void, env, _RM_EXCP, _WM_EXCP | _M_EAX | _M_EDX | _M_ECX, _AM_EXCP)
DEF_HELPER_1_M(rdpmc, void, env, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_1_M(rdmsr, void, env, (uint64_t)-1, (uint64_t)-1, 0)
DEF_HELPER_1_M(wrmsr, void, env, (uint64_t)-1, (uint64_t)-1, 0)

DEF_HELPER_2_M(check_iob, void, env, i32, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(check_iow, void, env, i32, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2_M(check_iol, void, env, i32, _RM_EXCP, _WM_EXCP, _AM_EXCP)
DEF_HELPER_2(outb, void, i32, i32)
DEF_HELPER_1(inb, tl, i32)
DEF_HELPER_2(outw, void, i32, i32)
DEF_HELPER_1(inw, tl, i32)
DEF_HELPER_2(outl, void, i32, i32)
DEF_HELPER_1(inl, tl, i32)

DEF_HELPER_3(svm_check_intercept_param, void, env, i32, i64)
DEF_HELPER_3(vmexit, void, env, i32, i64)
DEF_HELPER_4(svm_check_io, void, env, i32, i32, i32)
DEF_HELPER_3(vmrun, void, env, int, int)
DEF_HELPER_1(vmmcall, void, env)
DEF_HELPER_2(vmload, void, env, int)
DEF_HELPER_2(vmsave, void, env, int)
DEF_HELPER_1(stgi, void, env)
DEF_HELPER_1(clgi, void, env)
DEF_HELPER_1(skinit, void, env)
DEF_HELPER_2(invlpga, void, env, int)

/* x86 FPU */

DEF_HELPER_2(flds_FT0, void, env, i32)
DEF_HELPER_2(fldl_FT0, void, env, i64)
DEF_HELPER_2(fildl_FT0, void, env, s32)
DEF_HELPER_2(flds_ST0, void, env, i32)
DEF_HELPER_2(fldl_ST0, void, env, i64)
DEF_HELPER_2(fildl_ST0, void, env, s32)
DEF_HELPER_2(fildll_ST0, void, env, s64)
DEF_HELPER_1(fsts_ST0, i32, env)
DEF_HELPER_1(fstl_ST0, i64, env)
DEF_HELPER_1(fist_ST0, s32, env)
DEF_HELPER_1(fistl_ST0, s32, env)
DEF_HELPER_1(fistll_ST0, s64, env)
DEF_HELPER_1(fistt_ST0, s32, env)
DEF_HELPER_1(fisttl_ST0, s32, env)
DEF_HELPER_1(fisttll_ST0, s64, env)
DEF_HELPER_2(fldt_ST0, void, env, tl)
DEF_HELPER_2(fstt_ST0, void, env, tl)
DEF_HELPER_1(fpush, void, env)
DEF_HELPER_1(fpop, void, env)
DEF_HELPER_1(fdecstp, void, env)
DEF_HELPER_1(fincstp, void, env)
DEF_HELPER_2(ffree_STN, void, env, int)
DEF_HELPER_1(fmov_ST0_FT0, void, env)
DEF_HELPER_2(fmov_FT0_STN, void, env, int)
DEF_HELPER_2(fmov_ST0_STN, void, env, int)
DEF_HELPER_2(fmov_STN_ST0, void, env, int)
DEF_HELPER_2(fxchg_ST0_STN, void, env, int)
DEF_HELPER_1(fcom_ST0_FT0, void, env)
DEF_HELPER_1(fucom_ST0_FT0, void, env)
DEF_HELPER_1(fcomi_ST0_FT0, void, env)
DEF_HELPER_1(fucomi_ST0_FT0, void, env)
DEF_HELPER_1(fadd_ST0_FT0, void, env)
DEF_HELPER_1(fmul_ST0_FT0, void, env)
DEF_HELPER_1(fsub_ST0_FT0, void, env)
DEF_HELPER_1(fsubr_ST0_FT0, void, env)
DEF_HELPER_1(fdiv_ST0_FT0, void, env)
DEF_HELPER_1(fdivr_ST0_FT0, void, env)
DEF_HELPER_2(fadd_STN_ST0, void, env, int)
DEF_HELPER_2(fmul_STN_ST0, void, env, int)
DEF_HELPER_2(fsub_STN_ST0, void, env, int)
DEF_HELPER_2(fsubr_STN_ST0, void, env, int)
DEF_HELPER_2(fdiv_STN_ST0, void, env, int)
DEF_HELPER_2(fdivr_STN_ST0, void, env, int)
DEF_HELPER_1(fchs_ST0, void, env)
DEF_HELPER_1(fabs_ST0, void, env)
DEF_HELPER_1(fxam_ST0, void, env)
DEF_HELPER_1(fld1_ST0, void, env)
DEF_HELPER_1(fldl2t_ST0, void, env)
DEF_HELPER_1(fldl2e_ST0, void, env)
DEF_HELPER_1(fldpi_ST0, void, env)
DEF_HELPER_1(fldlg2_ST0, void, env)
DEF_HELPER_1(fldln2_ST0, void, env)
DEF_HELPER_1(fldz_ST0, void, env)
DEF_HELPER_1(fldz_FT0, void, env)
DEF_HELPER_1(fnstsw, i32, env)
DEF_HELPER_1(fnstcw, i32, env)
DEF_HELPER_2(fldcw, void, env, i32)
DEF_HELPER_1(fclex, void, env)
DEF_HELPER_1(fwait, void, env)
DEF_HELPER_1(fninit, void, env)
DEF_HELPER_2(fbld_ST0, void, env, tl)
DEF_HELPER_2(fbst_ST0, void, env, tl)
DEF_HELPER_1(f2xm1, void, env)
DEF_HELPER_1(fyl2x, void, env)
DEF_HELPER_1(fptan, void, env)
DEF_HELPER_1(fpatan, void, env)
DEF_HELPER_1(fxtract, void, env)
DEF_HELPER_1(fprem1, void, env)
DEF_HELPER_1(fprem, void, env)
DEF_HELPER_1(fyl2xp1, void, env)
DEF_HELPER_1(fsqrt, void, env)
DEF_HELPER_1(fsincos, void, env)
DEF_HELPER_1(frndint, void, env)
DEF_HELPER_1(fscale, void, env)
DEF_HELPER_1(fsin, void, env)
DEF_HELPER_1(fcos, void, env)
DEF_HELPER_3(fstenv, void, env, tl, int)
DEF_HELPER_3(fldenv, void, env, tl, int)
DEF_HELPER_3(fsave, void, env, tl, int)
DEF_HELPER_3(frstor, void, env, tl, int)
DEF_HELPER_3(fxsave, void, env, tl, int)
DEF_HELPER_3(fxrstor, void, env, tl, int)

DEF_HELPER_FLAGS_1(clz, TCG_CALL_NO_RWG_SE, tl, tl)
DEF_HELPER_FLAGS_1(ctz, TCG_CALL_NO_RWG_SE, tl, tl)
DEF_HELPER_FLAGS_2(pdep, TCG_CALL_NO_RWG_SE, tl, tl, tl)
DEF_HELPER_FLAGS_2(pext, TCG_CALL_NO_RWG_SE, tl, tl, tl)

/* MMX/SSE */

DEF_HELPER_2(ldmxcsr, void, env, i32)
DEF_HELPER_1(enter_mmx, void, env)
DEF_HELPER_1(emms, void, env)
DEF_HELPER_3(movq, void, env, ptr, ptr)

#define SHIFT 0
#include "ops_sse_header.h"
#define SHIFT 1
#include "ops_sse_header.h"

DEF_HELPER_3_M(rclb, tl, env, tl, tl, _M_CC, _M_CC_TMP, 0)
DEF_HELPER_3_M(rclw, tl, env, tl, tl, _M_CC, _M_CC_TMP, 0)
DEF_HELPER_3_M(rcll, tl, env, tl, tl, _M_CC, _M_CC_TMP, 0)
DEF_HELPER_3_M(rcrb, tl, env, tl, tl, _M_CC, _M_CC_TMP, 0)
DEF_HELPER_3_M(rcrw, tl, env, tl, tl, _M_CC, _M_CC_TMP, 0)
DEF_HELPER_3_M(rcrl, tl, env, tl, tl, _M_CC, _M_CC_TMP, 0)
#ifdef TARGET_X86_64
DEF_HELPER_3(rclq, tl, env, tl, tl)
DEF_HELPER_3(rcrq, tl, env, tl, tl)
#endif
